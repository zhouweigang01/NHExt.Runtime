using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHExt.Runtime.EntityAttribute;
using NHExt.Runtime.Model;
using NHExt.Runtime.Session;
 namespace {NameSpace}{
 [Serializable]
[Bussines(EntityName = "{EntityName}",Range={Range},OrgFilter={OrgFilter},Table="{TableName}")]
public partial class {Class} : {InhertClass}
{
 private EntityKey<{Class}> _key;
  public new virtual EntityKey<{Class}> Key
   {
      get
    {
       return this.GetEntityKey<{Class}>(ref _key);
  }
  }
  public static new string Guid ="{Guid}";
  ///是否多组织数据处理
   public override NHExt.Runtime.Enums.ViewRangeEnum Range
        {
            get
            {
                return {Range};
            }
        }
  ///数据是否按照根组织进行过滤
  public override bool OrgFilter {
	get{
		return {OrgFilter};
	}
  }
/// <summary>
/// 生成实体默认创建代码
/// </summary>
  public static new {Class} Create(){
		return Create(true);
  }
  private static {Class} Create(bool inList){
  	{Class} entity = new {Class}();
    entity.ID = NHExt.Runtime.Util.EntityGuidHelper.New();
    entity.EntityState = NHExt.Runtime.Enums.EntityState.Add;
	if(inList){
		if(Session.Current != null){
			Session.Current.InList(entity);
		}
	}
	return entity;
  }
	/// <summary>
	/// 实体私有数据，记录上次提交缓存之前的数据，只有在实体内部可用
	/// </summary>
	public new virtual {Class} OrignalData {
		get{
			if(this._orignalData == null){
				this.InitOrignalData();
			}
			return this._orignalData as {Class};
		}
	}
	public override void InitOrignalData() { 
		base.InitOrignalData();
	}
#region 实体列字段引用聚合初始化
protected override List<string> RefStr
{
    get
    {
        return new List<string>(){{RefStr}};
    }
}
protected override List<string> ComStr
{
    get
    {
        return new List<string>(){{ComStr}};
    }
}
protected override string PColumnStr
{
    get
    {
        return {PColumn};
    }
}
#endregion

#region 实体查询相关函数
public new static class Finder{
	public static List<{Class}> FindAll(string hql ,List<object> paramList = null, int startIndex = -1, int recordCount = -1){
		return  NHExt.Runtime.Query.EntityFinder.FindAll<{Class}>(hql ,paramList,startIndex ,recordCount);
	}
	public static {Class} Find(string hql ,List<object> paramList = null,int startIndex=-1){
		return  NHExt.Runtime.Query.EntityFinder.Find<{Class}>(hql ,paramList,startIndex);
	}
	public static {Class} FindById(long id){
		return  NHExt.Runtime.Query.EntityFinder.FindById<{Class}>(id);
	} 
}
#endregion 

#region CRUD相关操作
 protected override void SetDefaultValue()
{
   this.OnSetDefaultValue();
   base.SetDefaultValue();
 }
 protected override void Validate()
{
  this.OnValidate();
  base.Validate();
 }
 protected override void Inserting()
{
  this.OnInserting();
  base.Inserting();
}
 protected override void Inserted()
{
    this.OnInserted();
	base.Inserted();
}
protected override void Updating()
{
   this.OnUpdating();
   base.Updating();
 }
protected override void Updated()
{
   this.OnUpdated();
   base.Updated();
}
protected override void Deleting()
{
    this.OnDeleting();
	base.Deleting();
 }
protected override void Deleted()
{
   this.OnDeleted();
   base.Deleted();
}

#endregion