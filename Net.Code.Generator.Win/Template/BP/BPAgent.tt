<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="Net.Code.Builder.Base" #>
<#@ import namespace="Net.Code.Builder.Build" #>
<#@ import namespace="Net.Code.Builder.Build.Model" #>
<#@ parameter type="Net.Code.Builder.Build.TemplateDTO.BPEntity" name="entity" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace  <#= entity.Namespace#>.Agent
{
    public partial class <#= entity.Code#>Proxy : NHExt.Runtime.Model.BizAgent
    {
        private string _guid = "<#= entity.Guid#>";
        public override string Guid
        {
            get
            {
                return _guid;
            }
        }
        private string _proxyName = "<#= entity.Namespace#>.Agent.<#= entity.Code#>Proxy";
        public override string ProxyName
        {
            get
            {
                return this._proxyName;
            }
        }

		<#  foreach(Net.Code.Builder.Build.TemplateDTO.BPColumn col in entity.ColumnList){
		#>
			private <#= col.TypeString#> _<#= col.Code#>;
			/// <summary>
			/// <#= col.Name#>
			/// </summary>
			public virtual <#= col.TypeString#> <#= col.Code#>
			{
				get
				{
					return _<#= col.Code#>;
				}
				set
				{
					_<#= col.Code#> = value;
				}
			}
		<#;
		}
		#> 


        public <#= entity.Code#>Proxy()
        {
            this.invoker.RemoteIP = this.RemoteIP;
            this.invoker.DllName = "<#= entity.Namespace#>.dll";
            this.invoker.NS = "<#= entity.Namespace#>";
            this.invoker.ProxyName = "<#= entity.Code#>";
        }

        public override object DoProxy()
        {
            this.invoker.SourcePage = this.SourcePage;
			<#  foreach(Net.Code.Builder.Build.TemplateDTO.BPColumn col in entity.ColumnList){
			#>
				this.invoker.ParamList.Add(this._<#= col.Code#>);
			<#;
			}
			#> 
            List<NHExt.Runtime.AOP.IAgentAspect> aspectList = NHExt.Runtime.AOP.AspectManager.BuildAgentAspect(this.ProxyName);
            foreach (NHExt.Runtime.AOP.IAgentAspect aspect in aspectList)
            {
                aspect.BeforeDo(this, invoker.ParamList);
            }
            object obj = this.invoker.Do();
            <#= entity.ProxyReturnName#> result;
            if (this.invoker.CallerType == NHExt.Runtime.Session.CallerTypeEnum.WCF)
            {
                string xml = string.Empty;
                if (obj != null)
                {
                    xml = obj.ToString();
                }
                NHExt.Runtime.Logger.LoggerHelper.Info("远程wcf返回数据为:" + xml, NHExt.Runtime.Logger.LoggerInstance.RuntimeLogger);
                try
                {
                    result = NHExt.Runtime.Serialize.XmlSerialize.DeSerialize<<#= entity.ProxyReturnName#>>(xml);
                }
                catch (Exception ex)
                {
                    NHExt.Runtime.Logger.LoggerHelper.Error(ex, NHExt.Runtime.Logger.LoggerInstance.RuntimeLogger);
                    throw ex;
                }
            }
            else
            {
                result = (<#= entity.ProxyReturnName#>)obj;
            }
            foreach (NHExt.Runtime.AOP.IAgentAspect aspect in aspectList)
            {
                aspect.AfterDo(this, result);
            }
            return result;
        }
        public <#= entity.ProxyReturnName#> Do()
        {
            <#= entity.ProxyReturnName#> obj = (<#= entity.ProxyReturnName#>)this.DoProxy();
            return obj;
        }

        public override void SetValue(object obj, string memberName)
        {
           	switch(memberName){
		<#  foreach(Net.Code.Builder.Build.TemplateDTO.BPColumn col in entity.ColumnList)
		{
		#>
			case "<#= col.Code#>" :
				this._<#= col.Code#> = this.TransferValue<<#= col.TypeString#>>(obj);
			break;
		<#;
		}
		#> 
			default:
				base.SetValue(obj,memberName);
			break;
		}
        }
    }
}