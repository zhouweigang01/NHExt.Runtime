<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="Net.Code.Builder.Base" #>
<#@ import namespace="Net.Code.Builder.Build" #>
<#@ import namespace="Net.Code.Builder.Build.Model" #>
<#@ parameter type="Net.Code.Builder.Build.TemplateDTO.BPEntity" name="entity" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace <#= entity.Namespace#>
{
    public partial class <#= entity.Code#> : NHExt.Runtime.Model.BizProxy
    {
        private string _guid = "<#= entity.Guid#>";
        public override string Guid
        {
            get
            {
                return this._guid;
            }
        }
        private string _proxyName = "<#= entity.Namespace#>.Agent.<#= entity.Code#>";
        public override string ProxyName
        {
            get
            {
                return this._proxyName;
            }
        }
        private NHExt.Runtime.Session.CallerTypeEnum _callerType = NHExt.Runtime.Session.CallerTypeEnum.Reflect;

        public override NHExt.Runtime.Session.CallerTypeEnum CallerType
        {
            get
            {
                return this._callerType;
            }
        }

       <#  foreach(Net.Code.Builder.Build.TemplateDTO.BPColumn col in entity.ColumnList){
		#>
			private <#= col.TypeString#> _<#= col.Code#>;
			/// <summary>
			/// <#= col.Name#>
			/// </summary>
			public virtual <#= col.TypeString#> <#= col.Code#>
			{
				get
				{
					return _<#= col.Code#>;
				}
				set
				{
					_<#= col.Code#> = value;
				}
			}
		<#;
		}
		#> 

        internal <#= entity.ReturnName#> Do()
        {
            NHExt.Runtime.Proxy.ProxyContext ctx = new NHExt.Runtime.Proxy.ProxyContext();
            ctx.ProxyGuid = this._guid;
            return this.DoCommon(ctx);
        }

        internal void DoTask(bool autoRun = false)
        {
            this._callerType = NHExt.Runtime.Session.CallerTypeEnum.Reflect;
            NHExt.Runtime.Proxy.ProxyContext ctx = new NHExt.Runtime.Proxy.ProxyContext();
            ctx.ProxyGuid = this._guid;
             NHExt.Runtime.Logger.LoggerHelper.Info("系统调度任务，使用线程调度服务");
            NHExt.Runtime.Proxy.TaskThreadPool.ThreadPool.AddThreadItem((state) =>
            {
                NHExt.Runtime.Proxy.ProxyContext pCtx = state as NHExt.Runtime.Proxy.ProxyContext;
                this.DoCommon(pCtx);
            }, ctx, autoRun);
        }

        public override object Do(NHExt.Runtime.Proxy.ProxyContext ctx)
        {
            this._callerType = NHExt.Runtime.Session.CallerTypeEnum.Reflect;
            var obj = this.TypeConvert(this.DoCommon(ctx));
            return obj;
        }

        public override NHExt.Runtime.Model.WCFCallDTO DoWCF(NHExt.Runtime.Proxy.ProxyContext ctx)
        {
            string xml = string.Empty;
            NHExt.Runtime.Model.WCFCallDTO callDTO = new NHExt.Runtime.Model.WCFCallDTO();
            try
            {
                this._callerType = NHExt.Runtime.Session.CallerTypeEnum.WCF;
                var obj = this.TypeConvert(this.DoCommon(ctx));
                if (obj != null)
                {
                    xml = NHExt.Runtime.Serialize.XmlSerialize.Serialize(obj);
                }
                else
                {
                    xml = string.Empty;
                }
                callDTO.Success = true;
            }
            catch (Exception ex)
            {
                xml = ex.Message;
            }
            callDTO.Result = xml;
            return callDTO;
        }
        private <#= entity.ReturnName#> DoCommon(NHExt.Runtime.Proxy.ProxyContext ctx)
        {
            Exception errEx = null;
            try
            {
                using (NHExt.Runtime.Session.Transaction trans = NHExt.Runtime.Session.Transaction.New(<#= entity.Trans#>, ctx.UseReadDB))
                {
                    List<NHExt.Runtime.AOP.IProxyAspect> aspectList = new List<NHExt.Runtime.AOP.IProxyAspect>();
                    try
                    {
                        this.InitParameter(ctx);
                        ctx.ProxyStack.Add(new NHExt.Runtime.Auth.ProxyProperty() { ProxyGuid = this.Guid, ProxyName = this.ProxyName });
                        aspectList = NHExt.Runtime.AOP.AspectManager.BuildProxyAspect(this.ProxyName);
                        foreach (NHExt.Runtime.AOP.IProxyAspect insector in aspectList)
                        {
                            insector.BeforeDo(this, ctx);
                        }
                        var obj = this.DoExtend();

                        NHExt.Runtime.Session.Session.Current.Commit();

                        foreach (NHExt.Runtime.AOP.IProxyAspect insector in aspectList)
                        {
                            insector.AfterDo(this, obj);
                        }
                        trans.Commit();
                        return obj;
                    }
                    catch (Exception ex)
                    {
                        errEx = ex;
                        trans.RollBack();
                        NHExt.Runtime.Logger.LoggerHelper.Error(ex, NHExt.Runtime.Logger.LoggerInstance.RuntimeLogger);
                        throw ex;
                    }
                    finally
                    {
                        ctx.ProxyStack.RemoveAt(ctx.ProxyStack.Count - 1);
                    }
                }
            }
            catch (Exception err)
            {
                if (errEx != null)
                {
                    throw errEx;
                }
                else
                {
                    throw err;
                }
            }
        }

        private <#= entity.ProxyReturnName#> TypeConvert(<#= entity.ReturnName#> obj)
        {
			<# if(entity.IsEntity){#>
					<# if(entity.IsList){#>
						<#= entity.ProxyReturnName#> result = new <#= entity.ProxyReturnName#>();
						foreach(var o in obj){
							if(o != null){
								result.Add(o.ToDTO());
							}
						}
						return result;

					<# } else {#>
						if(obj == null) 
						{
							return null;
						}
						return obj.ToDTO();
	
					<#;
					}#>
			<# } else { #>
				return obj;
			<#;
			}#>
        }
        protected override void InitParameter(NHExt.Runtime.Proxy.ProxyContext ctx)
        {
            base.InitParameter(ctx);
            if (ctx != null)
            {
		<#  for(int i=0;i<entity.ColumnList.Count;i++){#>
			  if (this.CallerType == NHExt.Runtime.Session.CallerTypeEnum.WCF)
                {
                    this._<#=entity.ColumnList[i].Code#> = NHExt.Runtime.Serialize.XmlSerialize.DeSerialize<<#= entity.ColumnList[i].TypeString #>>(ctx.ParamList[<#= i#>].ToString());
                    ctx.ParamList[<#= i#>] = this._<#=entity.ColumnList[i].Code#>;
                }
                else
                {
                    if (ctx.ParamList.Count > 0)
                    {
                        this._<#=entity.ColumnList[i].Code#> = (<#= entity.ColumnList[i].TypeString#>)ctx.ParamList[<#= i#>];
                    }
                    else
                    {
                        ctx.ParamList.Add(this._<#=entity.ColumnList[i].Code#>);
                    }
                }
		<#;
		}#>
            }
        }
        public override void SetValue(object obj, string memberName)
        {
            switch (memberName)
            {
        <#  foreach(Net.Code.Builder.Build.TemplateDTO.BPColumn col in entity.ColumnList){
		#>
			case "<#= col.Code#>" :
				this._<#= col.Code#> = this.TransferValue<<#= col.TypeString#>>(obj);
			break;
		<#;
		}
		#> 
                default:
                    base.SetValue(obj, memberName);
                    break;
            }
        }

    }
}
